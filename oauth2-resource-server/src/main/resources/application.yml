# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /api

# Spring Application
spring:
  application:
    name: oauth2-resource-server

  # PostgreSQL Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/resource_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # Security OAuth2 Resource Server Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          # Authorization Server for JWT validation
          issuer-uri: http://localhost:9000

# Logging Configuration
logging:
  level:
    root: INFO
    com.example.oauth2.oauth2resourceserver: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: always

# Application specific configuration
app:
  # CORS settings
  cors:
    allowed-origins:
      - http://localhost:3000
    allowed-methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowed-headers:
      - Authorization
      - Content-Type
      - Accept
    allow-credentials: true
    max-age: 3600

  # API Rate limiting
  api:
    rate-limit:
      enabled: false
      requests-per-minute: 60